{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","isMatch","title","toLowerCase","includes","trim","completed","length","className","map","classNames","id","onClick","currentTodoActions","handleEye","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","catch","error","Error","finally","href","email","name","App","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efca8cdf.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetTodoStatus = {\n  type: 'filterTodo/Status';\n  payload: Status;\n};\n\ntype SetTodoQuery = {\n  type: 'filterTodo/Query';\n  payload: string;\n};\n\ntype ResetTodoQuery = {\n  type: 'filterTodo/ResetQuery';\n};\n\nconst setStatus = (status: Status): SetTodoStatus => ({\n  type: 'filterTodo/Status',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetTodoQuery => ({\n  type: 'filterTodo/Query',\n  payload: query,\n});\n\nconst resetQuery = (): ResetTodoQuery => ({\n  type: 'filterTodo/ResetQuery',\n});\n\nexport const actions = { setStatus, setQuery, resetQuery };\n\ntype State = {\n  query: string,\n  status: Status\n};\ntype Action = SetTodoStatus | SetTodoQuery | ResetTodoQuery;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filterTodo/Status':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filterTodo/Query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filterTodo/ResetQuery':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodoAction = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype State = Todo[];\ntype Action = SetAction;\n\nexport const actions = { setTodoAction };\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const {\n    todos,\n    filter: {\n      status,\n      query,\n    },\n    currentTodo,\n  } = useAppSelector((state) => state);\n\n  const handleEye = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const filteredTodos = useMemo(() => {\n    const isMatch = (title: string) => (query ? title.toLowerCase().includes(query.toLowerCase().trim()) : true);\n\n    return todos.filter(({ title, completed }) => {\n      switch (status) {\n        case 'active':\n          return !completed && isMatch(title);\n        case 'completed':\n          return completed && isMatch(title);\n        default:\n          return isMatch(title);\n      }\n    });\n  }, [todos, status, query]);\n\n  return (\n    <>\n      {!filteredTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos?.map((todo) => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={classNames({\n                'has-background-info-light': currentTodo?.id === todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  todo.completed ? 'has-text-success' : 'has-text-danger',\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleEye(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const { status, query } = useAppSelector((state) => state.filter);\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value as Status));\n  };\n\n  const handleReset = () => {\n    dispatch(filterActions.resetQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleReset}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch((error) => {\n          throw new Error('An error occurred while fetching the user:', error);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const handleClose = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then((todos) => dispatch(todoActions.setTodoAction(todos)))\n      .catch((error) => {\n        throw new Error('An error occurred while fetching todos:', error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              { isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}